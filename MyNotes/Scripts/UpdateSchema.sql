CREATE TABLE "Files" (
    "Id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "Name" character varying(1000) NOT NULL,
    "Version" integer NOT NULL,
    "ContentType" character varying(255) NULL,
    "Size" bigint NOT NULL,
    "Created" timestamp without time zone NOT NULL,
    "Updated" timestamp without time zone NOT NULL,
    "IsFolder" boolean NOT NULL,
    "ParentId" integer NULL,
    "AccessCount" integer NOT NULL,
    "IsFavorite" boolean NOT NULL,
    "IsPublic" boolean NOT NULL,
    CONSTRAINT "PK_Files" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Files_Files_ParentId" FOREIGN KEY ("ParentId") REFERENCES "Files" ("Id") ON DELETE RESTRICT
);

CREATE TABLE "FileHistories" (
    "FileId" integer NOT NULL,
    "Version" integer NOT NULL,
    "Name" character varying(1000) NOT NULL,
    "ContentType" character varying(255) NULL,
    "Size" bigint NOT NULL,
    "Created" timestamp without time zone NOT NULL,
    "Updated" timestamp without time zone NOT NULL,
    CONSTRAINT "PK_FileHistories" PRIMARY KEY ("FileId", "Version"),
    CONSTRAINT "FK_FileHistories_Files_FileId" FOREIGN KEY ("FileId") REFERENCES "Files" ("Id") ON DELETE CASCADE
);

CREATE INDEX "IX_Files_ParentId" ON "Files" ("ParentId");

ALTER SEQUENCE "Files_Id_seq" RESTART WITH 1000000;

ALTER TABLE "Files" ADD COLUMN tsv tsvector;

CREATE INDEX "FilesTsIndex" ON "Files" USING GIN(tsv);

CREATE OR REPLACE FUNCTION "FilesTsTriggerFunction"() RETURNS TRIGGER AS $$
BEGIN
    NEW.tsv := to_tsvector(NEW."Name");
    RETURN NEW;
END
$$ LANGUAGE plpgsql;

CREATE TRIGGER "FilesTsTrigger"
    BEFORE INSERT OR UPDATE ON "Files"
    FOR EACH ROW EXECUTE PROCEDURE "FilesTsTriggerFunction"();

CREATE OR REPLACE FUNCTION "SearchFiles"(q varchar) RETURNS SETOF "Files" AS $$
BEGIN
    RETURN QUERY SELECT * FROM "Files" WHERE plainto_tsquery(q) @@ tsv LIMIT 20;
    RETURN;
 END
$$ LANGUAGE plpgsql;

