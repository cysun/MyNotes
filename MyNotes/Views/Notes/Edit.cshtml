@model NoteInputModel
@{
    ViewData["Title"] = $"MyNotes - {Model.Subject}";
    var publishBtn = "btn-secondary";
    if (Model.Published != null)
    {
        if (Model.Published < DateTime.UtcNow)
            publishBtn = "btn-success";
        else
            publishBtn = "btn-warning";
    }
    var blogBtn = Model.IsBlog ? "btn-success" : "btn-secondary";
    var pinBtn = Model.IsPinned ? "btn-success" : "btn-secondary";
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index">Notes</a></li>
        <li class="breadcrumb-item"><a asp-action="View" asp-route-id="@Model.Id">@Model.Subject</a></li>
        <li class="breadcrumb-item active me-auto">Edit</li>
        <li>
            <button id="move" class="btn btn-outline-primary btn-sm me-2" data-bs-toggle="modal" data-bs-target="#moveModal">
                <i class="bi bi-folder-symlink-fill"></i>
            </button>
            <button id="delete" class="btn btn-outline-danger btn-sm"><i class="bi bi-trash-fill"></i></button>
        </li>
    </ol>
</nav>

<div class="btn-toolbar mb-3">
    <button id="status" type="button" class="btn btn-success me-2">
        <i class="bi bi-check-circle-fill"></i>
    </button>
    <div class="input-group me-2">
        <button id="publish" class="btn @publishBtn shadow-none"><i class="bi bi-cc-circle"></i></button>
        <input asp-for="Published" class="form-control" />
        <span id="unpublish" class="input-group-text"><i class="bi bi-x-lg"></i></span>
    </div>
    <a asp-controller="Blogs" asp-action="Edit" asp-route-id="@Model.Id" class="btn @blogBtn me-2"><i class="bi bi-broadcast-pin"></i></a>
    <button id="pin" class="btn @pinBtn shadow-none"><i class="bi bi-pin-fill"></i></button>
</div>

<form>
    <div class="mb-3">
        <input asp-for="Subject" class="form-control">
    </div>
    <div class="mb-3">
        <textarea asp-for="Content"></textarea>
    </div>
</form>

<div id="moveModal" class="modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Move to <span id="currentFolder"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="folders" data-id="" class="list-group list-group-flush">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button id="doMove" type="button" class="btn btn-primary">Move</button>
            </div>
        </div>
    </div>
</div>

@section StyleSheets {
    <link rel="stylesheet" href="~/lib/summernote/summernote-bs5.min.css" />
}
@section Scripts {
    <script src="~/lib/summernote/summernote-bs5.min.js"></script>
    <script src="~/lib/prettier/standalone.js"></script>
    <script src="~/lib/prettier/plugins/html.js"></script>
    <script>
        var paths = []; // current path from root
        var children; // children of the current folder
        function getChildFolders() {
            $.ajax({
                url: "@Context.Request.PathBase/Folders/GetChildFolders",
                data: paths[0].id ? { parentId: paths[0].id } : {},
                success: function (results) {
                    $("#currentFolder").text(paths[0].name);
                    children = results.filter(r => r.id != @Model.Id);
                    if (paths.length > 1)
                        children.unshift({
                            id: paths[1].id,
                            name: ".."
                        });
                    var items = children.map(child => {
                        var item = $(`<li class="child list-group-item" data-id="${child.id}">${child.name}</li>`);
                        item.click(function () {
                            $(".child").removeClass("active");
                            $(this).addClass("active");
                        });
                        item.dblclick(function () {
                            if ($(this).text() == "..")
                                paths.shift();
                            else
                                paths.unshift(children.find(c => c.id == $(this).attr("data-id")));
                            getChildFolders();
                        });
                        return item;
                    });
                    $("#folders").empty().append(items);
                }
            });
        }
        function setStatus(saved) {
            var status = $("#status").hasClass("btn-success");
            if (status == saved) return;
            if (saved)
                $("#status")
                    .removeClass("btn-warning")
                    .addClass('btn-success')
                    .empty()
                    .append("<i class='bi bi-check-circle-fill'></i>");
            else
                $("#status")
                    .removeClass("btn-success")
                    .addClass('btn-warning')
                    .empty()
                    .append("<i class='bi bi-exclamation-circle-fill'></i>");
        }
        // Code from https://stackoverflow.com/questions/14042193/how-to-trigger-an-event-in-input-text-after-i-stop-typing-writing
        var delay = (function () {
            var timer = 0;
            return function (callback, ms) {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();
        // Code from https://github.com/summernote/summernote/issues/3409 with update using Prettier 3 and Bootstrap icon
        var formatButton = function () {
            var ui = $.summernote.ui;
            var button = ui.button({
                contents: "<i class='bi bi-card-text'></i>",
                tooltip: "Format HTML",
                click: async function () {
                    if (prettier && prettierPlugins) {
                        let content = await prettier.format($("#Content").summernote("code"), {
                            parser: "html",
                            plugins: prettierPlugins
                        });
                        $("#Content").summernote("code", content);
                    }
                }
            });
            return button.render();
        };
        $(function () {
            $("#Content").summernote({
                height: 600,
                callbacks: {
                    onChange: function () {
                        setStatus(false);
                        delay(function () {
                            $.ajax({
                                url: "@Context.Request.PathBase/notes/@Model.Id/content",
                                method: "put",
                                data: { value: $("#Content").val() },
                                success: function () {
                                    setStatus(true);
                                }
                            });
                        }, 1000);
                    }
                },
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],
                    ['fontname', ['fontname']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video', 'hr']],
                    ['view', ['format', 'codeview', 'fullscreen']]
                ],
                buttons: {
                    format: formatButton
                }
            });
            $("#Subject").keyup(function () {
                setStatus(false);
                delay(function () {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/subject",
                        method: "put",
                        data: { value: $("#Subject").val() },
                        success: function () {
                            setStatus(true);
                        }
                    });
                }, 1000);
            });
            $("#delete").click(function () {
                if (confirm("Are you sure you want to delete this note?"))
                    window.location.href = "@Context.Request.PathBase/notes/delete/@Model.Id";
            });
            $("#unpublish").click(function () {
                if ($("#Published").val()) {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/published",
                        method: "put",
                        data: { value: null },
                        success: function () {
                            $("#Published").val("");
                            $("#publish").removeClass("btn-success btn-warning");
                            $("#publish").addClass("btn-secondary");
                        }
                    });
                }
            });
            $("#publish").click(function () {
                var publishDate = $("#Published").val();
                if (publishDate) {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/published",
                        method: "put",
                        data: { value: publishDate },
                        success: function () {
                            $("#publish").removeClass("btn-secondary btn-success btn-warning");
                            if (new Date(publishDate) <= Date.now())
                                $("#publish").addClass("btn-success");
                            else
                                $("#publish").addClass("btn-warning");
                        }
                    });
                }
            });
            $("#pin").click(function () {
                $.ajax({
                    url: "@Context.Request.PathBase/notes/@Model.Id/pinned",
                    method: "put",
                    success: function () {
                        $("#pin").toggleClass("btn-secondary").toggleClass("btn-success");
                    }
                });
            });
            $("#moveModal").on("show.bs.modal", function () {
                paths.unshift({
                    id: null,
                    name: "/"
                });
                getChildFolders();
            });
            $("#moveModal").on("hide.bs.modal", function () {
                paths = [];
                $("#folders").empty();
            });
            $("#doMove").click(function () {
                var fileId = @Model.Id;
                var url = `@Context.Request.PathBase/notes/move/${fileId}`;
                var selected = $("li.child.active");
                var parentId = selected.length == 1 ? selected.attr("data-id") : paths[0].id;
                if (parentId) url += `?parentId=${parentId}`;
                window.location.href = url;
            });
        });
    </script>
}
