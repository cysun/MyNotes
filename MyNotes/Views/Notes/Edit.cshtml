@model NoteInputModel
@{
    ViewData["Title"] = $"MyNotes - {Model.Subject}";
    var publishBtn = "btn-secondary";
    if (Model.Published != null)
    {
        if (Model.Published < DateTime.UtcNow)
            publishBtn = "btn-success";
        else
            publishBtn = "btn-warning";
    }
    var blogBtn = Model.IsBlog ? "btn-success" : "btn-secondary";
}

<nav>
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-action="Index">Notes</a></li>
        <li class="breadcrumb-item"><a asp-action="View" asp-route-id="@Model.Id">@Model.Subject</a></li>
        <li class="breadcrumb-item active me-auto">Edit</li>
        <li>
            <button id="delete" class="btn btn-danger btn-sm"><i class="fas fa-trash"></i></button>
        </li>
    </ol>
</nav>

<div class="btn-toolbar mb-3">
    <button id="status" type="button" class="btn btn-success me-2">
        <i class="fas fa-check-circle"></i>
    </button>
    <div class="input-group me-2">
        <button id="publish" class="btn @publishBtn shadow-none"><i class="fab fa-creative-commons-share"></i></button>
        <input asp-for="Published" class="form-control" />
        <span id="unpublish" class="input-group-text"><i class="fas fa-times"></i></span>
    </div>
    <a asp-controller="Blogs" asp-action="Edit" asp-route-id="@Model.Id" class="btn @blogBtn"><i class="fas fa-blog"></i></a>
</div>

<form>
    <div class="mb-3">
        <input asp-for="Subject" class="form-control">
    </div>
    <div class="mb-3">
        <textarea asp-for="Content"></textarea>
    </div>
</form>

@section StyleSheets{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-bs5.min.css"
      integrity="sha512-ngQ4IGzHQ3s/Hh8kMyG4FC74wzitukRMIcTOoKT3EyzFZCILOPF0twiXOQn75eDINUfKBYmzYn2AA8DkAk8veQ=="
      crossorigin="anonymous" referrerpolicy="no-referrer" />
}
    @section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.20/summernote-bs5.min.js"
        integrity="sha512-6F1RVfnxCprKJmfulcxxym1Dar5FsT/V2jiEUvABiaEiFWoQ8yHvqRM/Slf0qJKiwin6IDQucjXuolCfCKnaJQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://unpkg.com/prettier@2.7.1/standalone.js"></script>
    <script src="https://unpkg.com/prettier@2.7.1/parser-html.js"></script>
    <script>
        function setStatus(saved) {
            var status = $("#status").hasClass("btn-success");
            if (status == saved) return;
            if (saved)
                $("#status")
                    .removeClass("btn-warning")
                    .addClass('btn-success')
                    .empty()
                    .append("<i class='fas fa-check-circle'></i>");
            else
                $("#status")
                    .removeClass("btn-success")
                    .addClass('btn-warning')
                    .empty()
                    .append("<i class='fas fa-exclamation-circle'></i>");
        }
        // Code from https://stackoverflow.com/questions/14042193/how-to-trigger-an-event-in-input-text-after-i-stop-typing-writing
        var delay = (function() {
            var timer = 0;
            return function(callback, ms) {
                clearTimeout(timer);
                timer = setTimeout(callback, ms);
            };
        })();
        // Code from https://github.com/summernote/summernote/issues/3409
        var formatButton = function(context) {
            var ui = $.summernote.ui;
            var button = ui.button({
                contents: "<i class='fas fa-hand-sparkles'></i>",
                tooltip: "Format HTML",
                click: function() {
                    if (prettier && prettierPlugins) {
                        let content = prettier.format($("#Content").summernote("code"), {
                            parser: "html",
                            plugins: prettierPlugins
                        });
                        $("#Content").summernote("code", content);
                    }
                }
            });
            return button.render();
        };
        var saveButton = function(context) {
            var ui = $.summernote.ui;
            var button = ui.button({
                contents: "<i class='fas fa-save'></i>",
                tooltip: "Save",
                click: function() {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/content",
                        method: "put",
                        data: { value: $("#Content").val() },
                        success: function() {
                            setStatus(true);
                        }
                    });
                }
            });
            return button.render();
        };
        $(function() {
            $("#Subject").keyup(function() {
                setStatus(false);
                delay(function() {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/subject",
                        method: "put",
                        data: { value: $("#Subject").val() },
                        success: function() {
                            setStatus(true);
                        }
                    });
                }, 1000);
            });
            $("#Content").summernote({
                height: 600,
                callbacks: {
                    // Fixed the BS5 dropdown list bug. See https://github.com/summernote/summernote/issues/4170
                    onInit: function() {
                        $("button[data-toggle='dropdown']").each(function(index) {
                            $(this).removeAttr("data-toggle").attr("data-bs-toggle", "dropdown");
                        });
                    },
                    onChange: function() {
                        setStatus(false);
                        delay(function() {
                            $.ajax({
                                url: "@Context.Request.PathBase/notes/@Model.Id/content",
                                method: "put",
                                data: { value: $("#Content").val() },
                                success: function() {
                                    setStatus(true);
                                }
                            });
                        }, 1000);
                    }
                },
                toolbar: [
                    ['style', ['style']],
                    ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],
                    ['fontname', ['fontname']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['table', ['table']],
                    ['insert', ['link', 'picture', 'video', 'hr']],
                    ['view', ['format', 'codeview', 'fullscreen']],
                    ['save', ['save']],
                ],
                styleTags: ["p",
                    { tag: "div", title: "Normal (div)", value: "div" },
                    { tag: "pre", title: "Code", value: "pre" },
                    { tag: "blockquote", title: "Blockquote", className: "blockquote", value: "blockquote" },
                    "h1", "h2", "h3", "h4"],
                buttons: {
                    format: formatButton,
                    save: saveButton
                }
            });
            $("#delete").click(function() {
                if (confirm("Are you sure you want to delete this note?"))
                    window.location.href = "@Context.Request.PathBase/notes/delete/@Model.Id";
            });
            $("#unpublish").click(function() {
                if ($("#Published").val()) {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/published",
                        method: "put",
                        data: { value: null },
                        success: function() {
                            $("#Published").val("");
                            $("#publish").removeClass("btn-success btn-warning");
                            $("#publish").addClass("btn-secondary");
                        }
                    });
                }
            });
            $("#publish").click(function() {
                var publishDate = $("#Published").val();
                if (publishDate) {
                    $.ajax({
                        url: "@Context.Request.PathBase/notes/@Model.Id/published",
                        method: "put",
                        data: { value: publishDate },
                        success: function() {
                            $("#publish").removeClass("btn-secondary btn-success btn-warning");
                            if (new Date(publishDate) <= Date.now())
                                $("#publish").addClass("btn-success");
                            else
                                $("#publish").addClass("btn-warning");
                        }
                    });
                }
            });
        });
    </script>
}
